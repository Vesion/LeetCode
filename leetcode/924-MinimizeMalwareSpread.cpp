#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
using namespace std;

// brute-force, O(m*m*n), m = initial.size()
class Solution0 {
public:
    vector<vector<int>> g;
    int n;
    vector<bool> vis;

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        n = graph.size();
        g.resize(n);
        for (int i = 0; i < n; ++i) for (int j = 0; j < n; ++j) {
            if (graph[i][j]) {
                g[i].push_back(j);
                g[j].push_back(i);
            }
        }
        vis.resize(n, false);

        int mini = -1, minm = n+1;
        for (int i : initial) {
            fill(vis.begin(), vis.end(), false);
            int m = helper(initial, i);
            if (m < minm || (m == minm && i < mini)) {
                mini = i;
                minm = m;
            }
        }
        return mini;
    }

    int helper(const vector<int>& initial, int remove) {
        int res = 0;
        for (int i : initial) {
            if (i != remove && !vis[i]) res += dfs(i);
        }
        return res;
    }

    int dfs(int i) {
        int res = 1;
        vis[i] = true;
        for (int j : g[i]) {
            if (!vis[j]) res += dfs(j);
        }
        return res;
    }
};


// union-find
// for each union, count number of nodes and number of malwares,
// return the malware in the largest union if and only if the union has exact one malware,
// otherwise return the minimum index of malware
class Solution {
public:
    vector<int> root;
    int find(int x) {
        return x == root[x] ? root[x] : root[x] = find(root[x]);
    }
    void link(int x, int y) {
        int rx = find(x), ry = find(y);
        if (rx != ry) root[rx] = ry;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        root.resize(n); iota(root.begin(), root.end(), 0);
        for (int i = 0; i < n; ++i) for (int j = i+1; j < n; ++j) {
            if (graph[i][j]) link(i, j);
        }

        vector<int> counts(n, 0);
        for (int i = 0; i < n; ++i) ++counts[find(i)];

        vector<int> mals(n, 0);
        for (int i : initial) ++mals[find(i)];

        sort(initial.begin(), initial.end());
        int maxc = 0, maxi = -1;
        for (int i : initial) {
            int ri = find(i);
            if (mals[ri] == 1 && counts[ri] > maxc) {
                maxc = counts[ri];
                maxi = i;
            }
        }
        return maxi != -1 ? maxi : initial[0];
    }
};

int main() {
}
