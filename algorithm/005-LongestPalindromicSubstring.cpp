#include <iostream>
#include <vector>
#include <string>
using namespace std;

// common solution
// traverse the whole string, start finding the palindrome from each char, get the longest substr
string findPalindrome(string s, int l, int r) {
	int n = s.size();
	while (l >= 0 && r < n && s[l] == s[r]) {
		--l;
		++r;
	}
	return s.substr(l + 1, r - l - 1);
}

string longestPalindrome(string s) {
	if (s.size() <= 1)
		return s;
	string longest, str;
	for (int i = 0; i < s.size() - 1; i++) {
		str = findPalindrome(s, i, i);
		if (str.size() > longest.size())
			longest = str;

		str = findPalindrome(s, i, i + 1);
		if (str.size() > longest.size())
			longest = str;
	}
	return longest;
}

int main() {
	string s = "abacdfgdcaba";
	cout << s << " : " << longestPalindrome(s) << endl;

	s
	cout << s << " : " << longestPalindrome(s) << endl;
	return 0;
}